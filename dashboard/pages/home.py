#!/usr/bin/env python3
"""
P√°gina de inicio del dashboard
"""

import streamlit as st
from .common import show_system_metrics, CUSTOM_CSS

def show_home_page(data_manager):
    """Mostrar la p√°gina de inicio"""
    st.markdown(CUSTOM_CSS, unsafe_allow_html=True)
    
    # T√≠tulo principal
    st.title("üè† Dashboard de Trading - Inicio")
    
    # Descripci√≥n del sistema
    st.markdown("""
    ### Bienvenido al Sistema de Trading Integrado
    
    Este dashboard proporciona un an√°lisis completo de datos de trading con las siguientes funcionalidades:
    
    **üìä Fase 1 - Adquisici√≥n de Datos:**
    - Conexi√≥n en tiempo real con Binance
    - Almacenamiento en base de datos SQLite
    - Sistema de cach√© para optimizaci√≥n
    
    **üîç Fase 2 - An√°lisis T√©cnico:**
    - Indicadores t√©cnicos avanzados
    - An√°lisis de patrones de precios
    - Visualizaciones interactivas
    
    **‚úÖ Verificaci√≥n del Sistema:**
    - Monitoreo de salud de componentes
    - Validaci√≥n de datos
    - M√©tricas de rendimiento
    
    **üìà An√°lisis T√©cnico:**
    - RSI, MACD, Bandas de Bollinger
    - Medias m√≥viles y tendencias
    - Se√±ales de compra/venta
    
    **üéØ Monitoreo en Tiempo Real:**
    - Datos en vivo de mercado
    - Alertas autom√°ticas
    - Dashboard interactivo
    
    **üìã Reportes:**
    - An√°lisis hist√≥rico
    - M√©tricas de rendimiento
    - Exportaci√≥n de datos
    """)
    
    # Separador
    st.divider()
    
    # M√©tricas del sistema
    st.subheader("üìä Estado del Sistema")
    show_system_metrics(data_manager)
    
    # Separador
    st.divider()
    
    # Informaci√≥n de la base de datos
    st.subheader("üíæ Informaci√≥n de la Base de Datos")
    
    if data_manager:
        try:
            db_stats = data_manager.get_database_stats()
            
            if db_stats and db_stats.get('symbols'):
                st.success(f"‚úÖ Base de datos conectada con {db_stats['total_symbols']} s√≠mbolos")
                
                # Mostrar informaci√≥n de s√≠mbolos
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**S√≠mbolos disponibles:**")
                    for symbol_info in db_stats['symbols']:
                        symbol = symbol_info['symbol']
                        count = symbol_info['count']
                        st.write(f"‚Ä¢ {symbol}: {count:,} registros")
                
                with col2:
                    st.markdown("**Estad√≠sticas generales:**")
                    st.write(f"‚Ä¢ Total de registros: {db_stats.get('total_records', 0):,}")
                    st.write(f"‚Ä¢ S√≠mbolos √∫nicos: {db_stats.get('total_symbols', 0)}")
                    
                    # Mostrar √∫ltimo registro si existe
                    if db_stats.get('latest_timestamp'):
                        st.write(f"‚Ä¢ √öltimo registro: {db_stats['latest_timestamp']}")
            else:
                st.warning("‚ö†Ô∏è No hay datos disponibles en la base de datos")
                
        except Exception as e:
            st.error(f"‚ùå Error accediendo a la base de datos: {str(e)}")
    else:
        st.error("‚ùå No se pudo conectar al gestor de datos")
    
    # Informaci√≥n adicional
    st.divider()
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Sistema")
    
    info_col1, info_col2 = st.columns(2)
    
    with info_col1:
        st.markdown("""
        **Tecnolog√≠as utilizadas:**
        - Python 3.x
        - Streamlit
        - SQLite
        - Plotly
        - Pandas
        - Binance API
        """)
    
    with info_col2:
        st.markdown("""
        **Caracter√≠sticas:**
        - Datos en tiempo real
        - An√°lisis t√©cnico avanzado
        - Interfaz web interactiva
        - Sistema de cach√© optimizado
        - Monitoreo de salud
        """)